{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\n\nclass NotificationManager extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'notification-manager',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.log.info('Starting notifications manager ...');\n        // TODO: later more generic approach if we have other notifications than system\n        await this.subscribeForeignStates('system.host.*.notifications.system');\n        // TODO perform initial check for notifications on adapter start start\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        callback();\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        // TODO: the notifications object has changed, check if a new notification has been registered\n        // we need to cache the notifications object up from adapter start to check what is new\n        // or we decide to clear the notifications in every case if we handled them, so that\n        // all notifications which we should handle are new or need a new try\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NotificationManager(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NotificationManager())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AAEvB,MAAM,4BAA4B,MAAM,QAAQ;AAAA,EACrC,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AACnC,SAAK,IAAI,KAAK,oCAAoC;AAElD,UAAM,KAAK,uBAAuB,oCAAoC;AAAA,EAE1E;AAAA,EAKQ,SAAS,UAA4B;AACzC,aAAS;AAAA,EACb;AAAA,EAKQ,cAAc,IAAY,OAAgD;AAAA,EAKlF;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,oBAAoB,OAAO;AAC5G,OAAO;AAEH,GAAC,MAAM,IAAI,oBAAoB,GAAG;AACtC;",
  "names": []
}
